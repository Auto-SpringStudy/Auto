package com.springstudy.controller;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;

class GithubWebhookControllerTest {

    @Test
    void extractHeadingtest() {
        String document = "\t\n"
                + "### **구체 클래스 기반 프록시**\n"
                + "\n"
                + "**OrderRepositoryConcreteProxy**\n"
                + "```java\n"
                + "package hello.proxy.config.v1_proxy.concreate_proxy;\n"
                + "\n"
                + "import hello.proxy.app.v2.OrderRepositoryV2;\n"
                + "import hello.proxy.trace.TraceStatus;\n"
                + "import hello.proxy.trace.logtrace.LogTrace;\n"
                + "\n"
                + "public class OrderRepositoryConcreteProxy extends OrderRepositoryV2{\n"
                + "\n"
                + "    private final OrderRepositoryV2 target;\n"
                + "    private final LogTrace logTrace;\n"
                + "\n"
                + "    public OrderRepositoryConcreteProxy(OrderRepositoryV2 target, LogTrace logTrace){\n"
                + "\n"
                + "        this.target = target;\n"
                + "        this.logTrace = logTrace;\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public void save(String itemId){\n"
                + "\n"
                + "        TraceStatus status = null;\n"
                + "        try {\n"
                + "            status = logTrace.begin(\"OrderRepository.save()\");\n"
                + "            //target 호출\n"
                + "            target.save(itemId); //실제 객체 호출\n"
                + "            logTrace.end(status);\n"
                + "        } catch (Exception e) {\n"
                + "            logTrace.exception(status, e);\n"
                + "            throw e;\n"
                + "        }\n"
                + "    }\n"
                + "}\n"
                + "```\n"
                + "- 인터페이스가 아닌 OrderRepositoryV2 클래스를 상속 받아서 프록시를 만듦\n"
                + "- target.save(itemId); 를 호출하기 전에 로그를 남긴 후, 실제 저장 메서드 실행\n"
                + "- 예외가 발생하면 logTrace.execption(status,e); 로 기록\n"
                + "\n"
                + "**OrderServiceConcreteProxy**\n"
                + "```java\n"
                + "package hello.proxy.config.v1_proxy.concreate_proxy;\n"
                + "\n"
                + "import hello.proxy.app.v2.OrderServiceV2;\n"
                + "import hello.proxy.trace.TraceStatus;\n"
                + "import hello.proxy.trace.logtrace.LogTrace;\n"
                + "\n"
                + "public class OrderServiceConcreteProxy extends OrderServiceV2{\n"
                + "\n"
                + "    private final OrderServiceV2 target;\n"
                + "    private final LogTrace logTrace;\n"
                + "\n"
                + "    public OrderServiceConcreteProxy(OrderServiceV2 target, LogTrace logTrace){\n"
                + "        super(null); //부모 클래스 생성자를 호출해야 함\n"
                + "        this.target = target;\n"
                + "        this.logTrace = logTrace;\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public void orderItem(String itemId){\n"
                + "        TraceStatus status = null;\n"
                + "        try {\n"
                + "            status = logTrace.begin(\"OrderService.orderItem()\");\n"
                + "            //target 호출\n"
                + "            target.orderItem(itemId);\n"
                + "            logTrace.end(status);\n"
                + "        } catch (Exception e) {\n"
                + "            logTrace.exception(status, e);\n"
                + "            throw e;\n"
                + "        }\n"
                + "    }\n"
                + "}\n"
                + "```\n"
                + "- 인터페이스가 아닌 OrderServiceV2 클래스를 상속 받아서 프록시를 만듦\n"
                + "- super(null);을 호출해야 하는 이유:\n"
                + "1. OrderServiceV2의 생성자가 OrderRepositoryV2를 파라미터로 요구하기 떄문\n"
                + "2. 하지만 프록시는 부모의 기능을 사용하지 않아 null을 전달해도 문제 없음\n"
                + "\n"
                + "**클래스 기반 프록시의 단점**\n"
                + "- super(null) : OrderServiceV2 : 자바 기본 문법에 의해 자식 클래스를 생성할 때는 항상 super() 로 부모 클래스의 생성자를 호출\n"
                + "- 이 부분을 생략하면 기본 생성자가 호출, 그런데 부모 클래스인 OrderServiceV2 는 기본 생성자가 없고, 생성자에서 파라미터 1개를 필수로 받음 따라서 파라미터를 넣어서 super(..) 를 호출해야 함\n"
                + "- 프록시는 부모 객체의 기능을 사용하지 않기 때문에 super(null) 을 입력해도 됨\n"
                + "- 인터페이스 기반 프록시는 이런 고민을 하지 않아도 됨\n"
                + "\n"
                + "**OrderServiceV2의 생성자 - 참고**\n"
                + "```java\n"
                + "public OrderServiceV2(OrderRepositoryV2 orderRepository) {\n"
                + "            this.orderRepository = orderRepository;\n"
                + "}\n"
                + "```\n"
                + "\n"
                + "**OrderControllerConcreteProxy**\n"
                + "```java\n"
                + "package hello.proxy.config.v1_proxy.concreate_proxy;\n"
                + "\n"
                + "import hello.proxy.app.v2.OrderControllerV2;\n"
                + "import hello.proxy.trace.TraceStatus;\n"
                + "import hello.proxy.trace.logtrace.LogTrace;\n"
                + "\n"
                + "public class OrderControllerConcreteProxy extends OrderControllerV2 {\n"
                + "\n"
                + "    private final OrderControllerV2 target;\n"
                + "    private final LogTrace logTrace;\n"
                + "\n"
                + "    public OrderControllerConcreteProxy(OrderControllerV2 target, LogTrace logTrace) {\n"
                + "        super(null);\n"
                + "        this.target = target;\n"
                + "        this.logTrace =logTrace;\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public String request(String itemId) {\n"
                + "        TraceStatus status = null;\n"
                + "        try {\n"
                + "            status = logTrace.begin(\"OrderController.request()\");\n"
                + "            //target 호출\n"
                + "            String result = target.request(itemId); //실제 객체 호출\n"
                + "            logTrace.end(status);\n"
                + "            return result;\n"
                + "        } catch (Exception e) {\n"
                + "            logTrace.exception(status, e);\n"
                + "            throw e;\n"
                + "        }\n"
                + "    }\n"
                + "}\n"
                + "```\n"
                + "- OrderControllerV2를 상속하여 프록시 구현\n"
                + "- request() 호출 전후로 로그 기록 및 예외 처리 추가\n"
                + "\n"
                + "**ConcreteProxyConfig**\n"
                + "```java\n"
                + "package hello.proxy.config.v1_proxy;\n"
                + "\n"
                + "import hello.proxy.app.v2.OrderControllerV2;\n"
                + "import hello.proxy.app.v2.OrderRepositoryV2;\n"
                + "import hello.proxy.app.v2.OrderServiceV2;\n"
                + "import hello.proxy.config.v1_proxy.concreate_proxy.OrderControllerConcreteProxy;\n"
                + "import hello.proxy.config.v1_proxy.concreate_proxy.OrderRepositoryConcreteProxy;\n"
                + "import hello.proxy.config.v1_proxy.concreate_proxy.OrderServiceConcreteProxy;\n"
                + "import hello.proxy.trace.logtrace.LogTrace;\n"
                + "import org.springframework.context.annotation.Bean;\n"
                + "import org.springframework.context.annotation.Configuration;\n"
                + "\n"
                + "@Configuration\n"
                + "public class ConcreteProxyConfig {\n"
                + "\n"
                + "    @Bean\n"
                + "    public OrderControllerV2 orderControllerV2(LogTrace logTrace) {\n"
                + "        OrderControllerV2 controllerImpl = new\n"
                + "                OrderControllerV2(orderServiceV2(logTrace));\n"
                + "        return new OrderControllerConcreteProxy(controllerImpl, logTrace);\n"
                + "    }\n"
                + "    @Bean\n"
                + "    public OrderServiceV2 orderServiceV2(LogTrace logTrace) {\n"
                + "        OrderServiceV2 serviceImpl = new\n"
                + "                OrderServiceV2(orderRepositoryV2(logTrace));\n"
                + "        return new OrderServiceConcreteProxy(serviceImpl, logTrace);\n"
                + "    }\n"
                + "    @Bean\n"
                + "    public OrderRepositoryV2 orderRepositoryV2(LogTrace logTrace) {\n"
                + "        OrderRepositoryV2 repositoryImpl = new OrderRepositoryV2();\n"
                + "        return new OrderRepositoryConcreteProxy(repositoryImpl, logTrace);\n"
                + "    }\n"
                + "}\n"
                + "```\n"
                + "- OrderControllerV2, OrderServiceV2, OrderRepositoryV2 의 실제 객체를 만들고, 프록시 객체로 감싼 후 반환\n"
                + "- 스프링 컨테이너는 실제 객체가 아닌 프록시 객체를 빈으로 등록하여 사용\n"
                + "\n"
                + "**ProxyApplication**\n"
                + "```java\n"
                + "package hello.proxy;\n"
                + "\n"
                + "import hello.proxy.config.v1_proxy.ConcreteProxyConfig;\n"
                + "import hello.proxy.config.v1_proxy.interface_proxy.InterfaceProxyConfig;\n"
                + "import hello.proxy.trace.logtrace.LogTrace;\n"
                + "import hello.proxy.trace.logtrace.ThreadLocalLogTrace;\n"
                + "import org.springframework.boot.SpringApplication;\n"
                + "import org.springframework.boot.autoconfigure.SpringBootApplication;\n"
                + "import org.springframework.context.annotation.Bean;\n"
                + "import org.springframework.context.annotation.Import;\n"
                + "\n"
                + "//@Import(InterfaceProxyConfig.class)\n"
                + "@Import(ConcreteProxyConfig.class)\n"
                + "@SpringBootApplication(scanBasePackages = \"hello.proxy.app\") //주의\n"
                + "public class ProxyApplication {\n"
                + "\n"
                + "\tpublic static void main(String[] args) {\n"
                + "\t\tSpringApplication.run(ProxyApplication.class, args);\n"
                + "\t}\n"
                + "\n"
                + "\t@Bean\n"
                + "\tpublic LogTrace logTrace() {\n"
                + "\t\treturn new ThreadLocalLogTrace();\n"
                + "\t}\n"
                + "}\n"
                + "```\n"
                + "\n"
                + "**인터페이스 기반 프록시와 클래스 기반 프록시**\n"
                + "\n"
                + "**프록시**\n"
                + "\n"
                + "- 프록시를 사용한 덕분에 원본 코드를 전혀 변경하지 않고, V1, V2 애플리케이션에 LogTrace 기능을 적용할 수 있었음\n"
                + "\n"
                + "**인터페이스 기반 프록시 vs 클래스 기반 프록시**\n"
                + "\n"
                + "- 인터페이스가 없어도 클래스 기반으로 프록시를 생성할 수 있음\n"
                + "- 클래스 기반 프록시는 해당 클래스에만 적용할 수 있고, 인터페이스 기반 프록시는 인터페이스만 같으면 모든 곳에 적용 가능\n"
                + "- 클래스 기반 프록시는 상속을 사용하기 때문에 몇가지 제약이 있음\n"
                + "- 부모 클래스의 생성자를 호출해야 함(앞서 본 예제)\n"
                + "- 클래스에 final 키워드가 붙으면 상속이 불가능\n"
                + "- 메서드에 final 키워드가 붙으면 해당 메서드를 오버라이딩 할 수 없음\n"
                + "- 이렇게 보면 인터페이스 기반의 프록시가 더 좋아보임 맞음, 인터페이스 기반의 프록시는 상속이라는 제약에서 자유로움 프로그래밍 관점에서도 인터페이스를 사용하는 것이 역할과 구현을 명확하게 나누기 때문에 더 좋음\n"
                + "- 인터페이스 기반 프록시의 단점은 인터페이스가 필요하다는 그 자체, 인터페이스가 없으면 인터페이스 기반 프록시를 만들 수 없음\n"
                + "\n"
                + "**참고:** 인터페이스 기반 프록시는 캐스팅 관련해서 단점이 있는데, 이 내용은 강의 뒷부문에서 설명,이론적으로는 모든 객체에 인터페이스를 도입해서 역할과 구현을 나누는 것이 좋음, 이렇게 하면 역할과 구현을 나누어서 구현체를 매우 편리하게 변경할 수 있고 하지만 실제로는 구현을 거의 변경할 일이 없는 클래스도 많음\n"
                + "\n"
                + "**결론**\n"
                + "\n"
                + "- 실무에서는 프록시를 적용할 때 V1처럼 인터페이스도 있고, V2처럼 구체 클래스도 있어 2가지 상황을 모두 대응할 수 있어야 함\n"
                + "- 너무 많은 프록시 클래스 지금까지 프록시를 사용해서 기존 코드를 변경하지 않고, 로그 추적기라는 부가 기능을 적용할 수 있었음\n"
                + "- 그런데 문제는 프록시 클래스를 너무 많이 만들어야 한다는 점, 잘 보면 프록시 클래스가 하는 일은 LogTrace 를 사용하는 것인데, 그 로직이 모두 똑같고 대상 클래스만 다를 뿐 만약 적용해야 하는 대상 클래스가 100개라면 프록시 클래스도 100개를 만들어야함\n"
                + "\n"
                + "프록시 클래스를 하나만 만들어서 모든 곳에 적용하는 방법은 없을까?\n"
                + "바로 다음에 설명할 동적 프록시 기술이 이 문제를 해결해줌\n"
                + "\n"
                + "## **리플렉션**\n"
                + "\n"
                + "- 지금까지 프록시를 사용해서 ";

        List<String> strings = extractHeadings(document);
        strings.forEach(i -> System.out.println(i));

    }

    List<String> extractHeadings(String document) {
        List<String> headings = new ArrayList<>();
        String[] lines = document.split("\n"); // 줄 단위로 분리

        for (String line : lines) {
            // #으로 시작하는 줄인지 확인 (공백 포함)
            if (line.trim().startsWith("#")) {

                headings.add(line.replace("#", "").replace("*", "").trim());
            }
        }

        return headings;
    }

}