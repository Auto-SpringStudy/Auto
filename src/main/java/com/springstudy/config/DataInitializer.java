package com.springstudy.config;


import com.springstudy.domain.Discussion;
import com.springstudy.domain.User;
import com.springstudy.repository.DiscussionRepository;
import com.springstudy.repository.UserRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.time.Instant;
import java.util.List;

@Configuration
public class DataInitializer {

    @Bean
    public CommandLineRunner initDatabase(DiscussionRepository discussionRepository) {
        return args -> {
            // 기존 데이터가 없을 경우에만 추가
            if (discussionRepository.count() == 0) {
                List<Discussion> discussions = List.of(
                        Discussion.builder()
                                .discussionNumber(1L)
                                .title("Spring Boot 3.4 Released!")
                                .user("spring_dev")
                                .createdAt(Instant.now().minusSeconds(86400))
                                .updatedAt(Instant.now())
                                .body("섹션2. 예제 만들기\n"
                                        + "1️⃣ 프로젝트 생성\n"
                                        + "image\n"
                                        + "프로젝트 생성 정보\n"
                                        + "Project : Gradle - Groovy\n"
                                        + "\n"
                                        + "Language : Java\n"
                                        + "\n"
                                        + "Spring Boot : 3.4.3\n"
                                        + "\n"
                                        + "Project Metadata\n"
                                        + "\n"
                                        + "Group : hello\n"
                                        + "Artifact : advanced\n"
                                        + "Name : advanced\n"
                                        + "Packaging : Jar\n"
                                        + "Java : 17\n"
                                        + "Dependencies\n"
                                        + "\n"
                                        + "Spring Web\n"
                                        + "Lombok\n"
                                        + "2️⃣ 예제 프로젝트 만들기 - V0\n"
                                        + "만들면서 학습 해볼 애플리케이션은 Controller → Service → Repository 순으로 만들어보자.\n"
                                        + "\n"
                                        + "✅ OrderRepositoryV0\n"
                                        + "\n"
                                        + "package hello.advanced.app.V0;\n"
                                        + "\n"
                                        + "import lombok.RequiredArgsConstructor;\n"
                                        + "import org.springframework.stereotype.Repository;\n"
                                        + "\n"
                                        + "@Repository //컴포넌 스캔의 대상이 되어, 스프링 빈으로 자동 등록된다.\n"
                                        + "@RequiredArgsConstructor\n"
                                        + "public class OrderRepositoryV0 {\n"
                                        + "\n"
                                        + "    public void save(String itemId) {\n"
                                        + "        //저장 로직\n"
                                        + "        if (itemId.equals(\"ex\")) { // itemId가 ex로 넘어오면 문제 발생(예외 발생) \n"
                                        + "            throw new IllegalAccessException(\"예외 발생!\");\n"
                                        + "        }\n"
                                        + "        \n"
                                        + "        sleep(1000); // 리포지토리는 상품을 저장하는데 약 1초 정도 걸리는 것으로 1초를 지연 줌\n"
                                        + "    }\n"
                                        + "    \n"
                                        + "    private void sleep(int millis) {\n"
                                        + "        try {\n"
                                        + "            Thread.sleep(millis);\n"
                                        + "        } catch (InterruptedException e) {\n"
                                        + "            e.printStackTrace();\n"
                                        + "        }\n"
                                        + "    }\n"
                                        + "}\n"
                                        + "✅ OrderServiceV0\n"
                                        + "package hello.advanced.app.V0;\n"
                                        + "\n"
                                        + "import lombok.RequiredArgsConstructor;\n"
                                        + "import org.springframework.beans.factory.annotation.Autowired;\n"
                                        + "import org.springframework.stereotype.Service;\n"
                                        + "\n"
                                        + "@Service\n"
                                        + "//@RequiredArgsConstructor\n"
                                        + "public class OrderService {\n"
                                        + "    \n"
                                        + "    \n"
                                        + "    private final OrderRepositoryV0 orderRepository;\n"
                                        + "\n"
                                        + "    @Autowired\n"
                                        + "    public OrderService(OrderRepositoryV0 orderRepository) {\n"
                                        + "        this.orderRepository = orderRepository;\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    public void orderItem(String itemId) {\n"
                                        + "        orderRepository.save(itemId);\n"
                                        + "    }\n"
                                        + "}\n"
                                        + "✅ OrderControllerV0\n"
                                        + "package hello.advanced.app.V0;\n"
                                        + "\n"
                                        + "import lombok.RequiredArgsConstructor;\n"
                                        + "import org.springframework.web.bind.annotation.GetMapping;\n"
                                        + "import org.springframework.web.bind.annotation.RestController;\n"
                                        + "\n"
                                        + "@RestController // @Controller + @ResponseBody\n"
                                        + "@RequiredArgsConstructor\n"
                                        + "public class OrderControllerV0 {\n"
                                        + "    \n"
                                        + "    private final OrderServiceV0 orderService;\n"
                                        + "\n"
                                        + "    @GetMapping\n"
                                        + "    public String request(String itemId) {\n"
                                        + "        orderService.orderItem(itemId);\n"
                                        + "        return \"ok\";\n"
                                        + "    }\n"
                                        + "        \n"
                                        + "}\n"
                                        + "결과 - 정상적인 결과\n"
                                        + "image 1\n"
                                        + "결과 - ex 파라미터 요청 시\n"
                                        + "image 2\n"
                                        + "결과 예외 로그\n"
                                        + "image 3\n"
                                        + "실무에서 일반적으로 사용하는 흐름\n"
                                        + "컨트롤러 → 서비스 → 리포지토리\n"
                                        + "3️⃣ 로그 추적기 - 요구사항 분석\n"
                                        + "➡️ 상황\n"
                                        + "애플리케이션이 병목현상이 자주 일어나는 상황\n"
                                        + "로그 추적기 기능 만들기\n"
                                        + "✅요구사항\n"
                                        + "모든 public 메서드의 호출과 응답 정보를 로그로 출력\n"
                                        + "\n"
                                        + "애플리케이션의 흐름을 변경하면 안됨\n"
                                        + "\n"
                                        + "로그를 남긴다고 해서 비즈니스 로직의 동작에 영향을 주면 안됨\n"
                                        + "메서드 호출에 걸린 시간\n"
                                        + "\n"
                                        + "정상 흐름과 예외 흐름 구분\n"
                                        + "\n"
                                        + "예외 발생시 예외 정보가 남아야 함\n"
                                        + "메서드 호출의 깊이 표현\n"
                                        + "\n"
                                        + "HTTP 요청을 구분\n"
                                        + "\n"
                                        + "HTTP 요청 단위로 특정 ID를 남겨서 어떤 HTTP 요청에서 시작된 것인지 명확하게 구분이 가능해야 함\n"
                                        + "트랜잭션 ID (DB 트랜잭션 X), 여기서는 하나의 HTTP 요청이 시작해서 끝이 날 때 까지를 하나의 트랜잭션이라고 함\n"
                                        + "정상 요청\n"
                                        + "\n"
                                        + "정상 요청\n"
                                        + " [796bccd9] OrderController.request()\n"
                                        + " [796bccd9] |-->OrderService.orderItem()\n"
                                        + " [796bccd9] |   |-->OrderRepository.save()\n"
                                        + " [796bccd9] |   |<--OrderRepository.save() time=1004ms\n"
                                        + " [796bccd9] |<--OrderService.orderItem() time=1014ms\n"
                                        + " [796bccd9] OrderController.request() time=1016ms\n"
                                        + "OrderRepository.save() time=1004ms : 응답 시간 1초 정도\n"
                                        + "\n"
                                        + "예외 발생\n"
                                        + "\n"
                                        + "예외 발생\n"
                                        + "[b7119f27] OrderController.request()\n"
                                        + "[b7119f27] |-->OrderService.orderItem()\n"
                                        + "[b7119f27] | |-->OrderRepository.save() \n"
                                        + "[b7119f27] | |<X-OrderRepository.save() time=0ms ex=java.lang.IllegalStateException: 예외 발생! \n"
                                        + "[b7119f27] |<X-OrderService.orderItem() time=10ms ex=java.lang.IllegalStateException: 예외 발생! \n"
                                        + "[b7119f27] OrderController.request() time=11ms ex=java.lang.IllegalStateException: 예외 발생!\n"
                                        + "참고\n"
                                        + "모니터링 툴을 도입하면 많은 부분이 해결된다. 하지만 모니터링 툴로도 못잡는 것이 있을 수 있다.\n"
                                        + "\n"
                                        + "4️⃣ 로그 추적기 V1 - 프로토타입 개발\n"
                                        + "애플리케이션의 모든 로직에 직접 로그를 남겨도된다. 하지만 그것보다 효율적인 개발이 필요하다. 특히 트랜잭션 ID와 깊이를 표현하는 방법은 기존 정보를 이어 받아야 하기 때문에 단순히 로그만 남긴다고 해결할 수 있는 것은 아니다.\n"
                                        + "\n"
                                        + "로그 추적기를 위한 기반 데이터를 가지고 있는 TraceId, TraceStatus 클래스를 만들자.\n"
                                        + "\n"
                                        + "TraceId\n"
                                        + "\n"
                                        + "package hello.advanced.trace;\n"
                                        + "\n"
                                        + "import java.util.UUID;\n"
                                        + "\n"
                                        + "public class TraceId {\n"
                                        + "\n"
                                        + "    private String id;\n"
                                        + "    private int level;\n"
                                        + "\n"
                                        + "    public TraceId() {\n"
                                        + "        this.id = createId();\n"
                                        + "        this.level = 0;\n"
                                        + "    }\n"
                                        + "    \n"
                                        + "    private TraceId(String id, int level) {\n"
                                        + "        this.id = id;\n"
                                        + "        this.level = level;\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    private String createId() {\n"
                                        + "        return UUID.randomUUID().toString().substring(0, 8); // 앞자리 8자리만 사용\n"
                                        + "    }\n"
                                        + "    \n"
                                        + "    \n"
                                        + "    public TraceId createNextId() {\n"
                                        + "        return new TraceId(id, level + 1);\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    public TraceId createPreviousId() {\n"
                                        + "        return new TraceId(id, level - 1);\n"
                                        + "    }\n"
                                        + "    \n"
                                        + "    \n"
                                        + "    // 첫번째 레벨인지 확인하는 메서드 \n"
                                        + "    public boolean isFirstLevel() {\n"
                                        + "        return level == 0;\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    public String getId() {\n"
                                        + "        return id;\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    public int getLevel() {\n"
                                        + "        return level;\n"
                                        + "    }\n"
                                        + "}\n"
                                        + "위 코드 설명\n"
                                        + "로그 추적기는 트랜잭션ID와 깊이를 표한하는 방법이 필요\n"
                                        + "트랜잭션ID와 깊이를 표현하는 level을 묶어서 TraceId라는 개념 생성\n"
                                        + "TraceId는 단순히 id, level 정보를 함께 가지고 있음\n"
                                        + "[796bccd9] OrderController.request() //트랜잭션ID:796bccd9, level:0\n"
                                        + "[796bccd9] |-->OrderService.orderItem() //트랜잭션ID:796bccd9, level:1\n"
                                        + "[796bccd9] | |-->OrderRepository.save()//트랜잭션ID:796bccd9, level:2\n"
                                        + "UUID\n"
                                        + "createId에서 UUID 개념을 사용하는데 여기서는 UUID가 너무 길어서 앞에 8자리만 사용하겠다.\n"
                                        + "여기서는 UUID 값을 트랜잭션ID로 사용\n"
                                        + "ab99e16f-3cde-4d24-8241-256108c203a2 //생성된 UUID\n"
                                        + "ab99e16f //앞 8자리만 사용\n"
                                        + "createNextId\n"
                                        + "\n"
                                        + "다음 TraceId를 만든다\n"
                                        + "깊이가 증가해도 트랜잭션 ID는 같음\n"
                                        + "깊이가 + 1\n"
                                        + "createPreviousId\n"
                                        + "\n"
                                        + "createNextId()의 반대 역할\n"
                                        + "TraceStatus\n"
                                        + "\n"
                                        + "package hello.advanced.trace;\n"
                                        + "\n"
                                        + "public class TraceStatus {\n"
                                        + "\n"
                                        + "    private TraceId traceId;\n"
                                        + "    private Long startTimeMs;\n"
                                        + "    private String message;\n"
                                        + "\n"
                                        + "    public TraceStatus(TraceId traceId, Long startTimeMs, String message) {\n"
                                        + "        this.traceId = traceId;\n"
                                        + "        this.startTimeMs = startTimeMs;\n"
                                        + "        this.message = message;\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    public TraceId getTraceId() {\n"
                                        + "        return traceId;\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    public Long getStartTimeMs() {\n"
                                        + "        return startTimeMs;\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    public String getMessage() {\n"
                                        + "        return message;\n"
                                        + "    }\n"
                                        + "}\n"
                                        + "로그를 시작하면 끝이 있어야 함.\n"
                                        + "[796bccd9] OrderController.request() //로그 시작\n"
                                        + "[796bccd9] OrderController.request() time=1016ms //로그 종료\n"
                                        + "TraceStatus는 로그를 시작할 때의 상태 정보를 가지고 있다. 이 상태 정보는 로그를 종료할 때 사용된다.\n"
                                        + "\n"
                                        + "TraceId : 내부에 트랜잭션 ID와 level을 가지고 있다.\n"
                                        + "\n"
                                        + "startTimeMs : 로그 시작시간이다. 로그 종료시 이 시작 시간을 기준으로 시작~종료까지 전체 수행 시간을 구할 수 있다.\n"
                                        + "\n"
                                        + "message : 시작시 사용한 메시지이다. 이후 로그 종료시에도 이 메시지를 사용해서 출력한다.\n"
                                        + "\n"
                                        + "HelloTraceV1\n"
                                        + "\n"
                                        + "package hello.advanced.trace;\n"
                                        + "\n"
                                        + "import lombok.extern.slf4j.Slf4j;\n"
                                        + "import org.springframework.stereotype.Component;\n"
                                        + "\n"
                                        + "@Slf4j\n"
                                        + "@Component // 싱글톤으로 사용하기 위해 스프링 빈으로 등록, 즉 컴포넌트 스캔의 대상\n"
                                        + "public class HelloTraceV1 {\n"
                                        + "    private static final String START_PREFIX = \"-->\";\n"
                                        + "    private static final String COMPLETE_PREFIX = \"<--\";\n"
                                        + "    private static final String EX_PREFIX = \"<X-\";\n"
                                        + "\n"
                                        + "    public TraceStatus begin(String message) { // 로그 시작\n"
                                        + "        TraceId traceId = new TraceId();\n"
                                        + "        Long startTimeMs = System.currentTimeMillis(); \n"
                                        + "        log.info(\"[{}] {}{}\", traceId.getId(), addSpace(START_PREFIX, traceId.getLevel()), message);\n"
                                        + "        return new TraceStatus(traceId, startTimeMs, message);\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    public void end(TraceStatus status) {\n"
                                        + "        complete(status, null);\n"
                                        + "    }\n"
                                        + "    public void exception(TraceStatus status, Exception e) {\n"
                                        + "        complete(status, e);\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    private void complete(TraceStatus status, Exception e) {\n"
                                        + "        Long stopTimeMs = System.currentTimeMillis();\n"
                                        + "        long resultTimeMs = stopTimeMs - status.getStartTimeMs();\n"
                                        + "        TraceId traceId = status.getTraceId();\n"
                                        + "        if (e == null) {\n"
                                        + "            log.info(\"[{}] {}{} time={}ms\", traceId.getId(),\n"
                                        + "                    addSpace(COMPLETE_PREFIX, traceId.getLevel()), status.getMessage(), resultTimeMs);\n"
                                        + "        } else {\n"
                                        + "            log.info(\"[{}] {}{} time={}ms ex={}\", traceId.getId(),\n"
                                        + "                    addSpace(EX_PREFIX, traceId.getLevel()), status.getMessage(), resultTimeMs, e.toString());\n"
                                        + "        }\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    //level = 0\n"
                                        + "    //level = 1 | -->\n"
                                        + "    //level = 2 |    |-->\n"
                                        + "    \n"
                                        + "    //level = 2 ex |    |<X-\n"
                                        + "    //level = 1 ex |<X-\n"
                                        + "    private static String addSpace(String prefix, int level) {\n"
                                        + "        StringBuilder sb = new StringBuilder();\n"
                                        + "        for (int i = 0; i < level; i++) {\n"
                                        + "            sb.append( (i == level - 1) ? \"|\" + prefix : \"|   \");\n"
                                        + "        }\n"
                                        + "        return sb.toString();\n"
                                        + "    }\n"
                                        + "\n"
                                        + "}\n"
                                        + "위 코드 분석\n"
                                        + "공개 메서드\n"
                                        + "\n"
                                        + "begin()\n"
                                        + "end()\n"
                                        + "로그를 정상 종료한다.\n"
                                        + "파라미터로 시작 로그의 상태(TraceStatus)를 전달 받는다. 이 값을 활용해서 실행 시간을 계산하고, 종료시에도 시작할 때와 동일한 로그 메시지를 출력할 수 있다.\n"
                                        + "exception()\n"
                                        + "로그를 예외 상황으로 종료한다.\n"
                                        + "TraceStatus, Exception 정보를 함께 전달 받아서 실행 시간, 예외 정보를 포함한 결과 로그를 출력한다.\n"
                                        + "비공개 메서드\n"
                                        + "\n"
                                        + "complete()\n"
                                        + "prefix: -->\n"
                                        + "level 0: ``\n"
                                        + "level 1: |-->\n"
                                        + "level 2: | |-->\n"
                                        + "prefix: <--\n"
                                        + "level 0: ``\n"
                                        + "level 1: |<--\n"
                                        + "level 2: | |<--\n"
                                        + "prefix: <X-\n"
                                        + "level 0: ``\n"
                                        + "level 1: |<X-\n"
                                        + "level 2: | |<X-\n"
                                        + "\uD83D\uDCDD테스트 코드 작성\n"
                                        + "HelloTraceV1Test\n"
                                        + "package hello.advanced.trace.hellotrace;\n"
                                        + "\n"
                                        + "import hello.advanced.trace.HelloTraceV1;\n"
                                        + "import hello.advanced.trace.TraceStatus;\n"
                                        + "import org.junit.jupiter.api.Test;\n"
                                        + "\n"
                                        + "class HelloTraceV1Test {\n"
                                        + "\n"
                                        + "    @Test\n"
                                        + "    void begin_end() {\n"
                                        + "        HelloTraceV1 trace = new HelloTraceV1();\n"
                                        + "        TraceStatus status = trace.begin(\"hello\");\n"
                                        + "        trace.end(status);\n"
                                        + "    }\n"
                                        + "\n"
                                        + "    @Test\n"
                                        + "    void begin_exception() {\n"
                                        + "        HelloTraceV1 trace = new HelloTraceV1();\n"
                                        + "        TraceStatus status = trace.begin(\"hello\");\n"
                                        + "        trace.exception(status, new IllegalStateException());\n"
                                        + "    }\n"
                                        + "}\n"
                                        + "begin_end 결과\n"
                                        + "22:35:23.483 [Test worker] INFO hello.advanced.trace.HelloTraceV1 -- [4daf2577] hello\n"
                                        + "22:35:23.483 [Test worker] INFO hello.advanced.trace.HelloTraceV1 -- [4daf2577] hello time=0ms\n"
                                        + "begin_exception 결과\n"
                                        + "22:35:23.475 [Test worker] INFO hello.advanced.trace.HelloTraceV1 -- [dd10b67f] hello\n"
                                        + "22:35:23.478 [Test worker] INFO hello.advanced.trace.HelloTraceV1 -- [dd10b67f] hello time=3ms ex=java.lang.IllegalStateException\n"
                                        + "주의!\n"
                                        + "\n"
                                        + "지금까지 만든 로그 추적기가 어떻게 동작하는지 제대로 알고 있어야한다.그래야지 다음 단계로 갈 수 있음")
                                .discussionUrl("https://github.com/spring-projects/spring-boot/discussions/1")
                                .build(),
                        Discussion.builder()
                                .discussionNumber(2L)
                                .title("Thymeleaf 사용법")
                                .user("template_master")
                                .createdAt(Instant.now().minusSeconds(172800))
                                .updatedAt(Instant.now())
                                .body("Thymeleaf를 사용하여 동적인 웹 페이지를 쉽게 생성하는 방법을 설명합니다.")
                                .discussionUrl("https://github.com/thymeleaf/thymeleaf/discussions/2")
                                .build(),
                        Discussion.builder()
                                .discussionNumber(3L)
                                .title("JPA 성능 최적화")
                                .user("database_expert")
                                .createdAt(Instant.now().minusSeconds(259200))
                                .updatedAt(Instant.now())
                                .body("JPA의 성능을 최적화하기 위한 팁과 전략을 공유합니다.")
                                .discussionUrl("https://github.com/hibernate/hibernate-orm/discussions/3")
                                .build(),
                        Discussion.builder()
                                .discussionNumber(4L)
                                .title("Docker와 Spring Boot 연동")
                                .user("devops_guru")
                                .createdAt(Instant.now().minusSeconds(345600))
                                .updatedAt(Instant.now())
                                .body("Docker를 사용하여 Spring Boot 애플리케이션을 컨테이너화하는 방법을 설명합니다.")
                                .discussionUrl("https://github.com/docker/docker/discussions/4")
                                .build()
                );

                discussionRepository.saveAll(discussions);
            }
        };
    }

    @Bean
    public CommandLineRunner initUsers(UserRepository userRepository) {
        return args -> {
            if (userRepository.count() == 0) {
                User user = User.builder()
                        .username("spring")
                        .password("spring")
                        .build();
                userRepository.save(user);
            }
        };
    }
}
